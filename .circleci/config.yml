---
version: 2.1
orbs:
  release-management: salesforce/npm-release-management@4
  jq: circleci/jq@2.2
  slack: circleci/slack@3.4.2

parameters:
  run-auto-workflows:
    default: true
    type: boolean
  run-just-nuts:
    default: false
    type: boolean
  nuts_job_data:
    description: Parameter to pass the set of NUTs started across all plugins
    default: '[]'
    type: string

commands:
  verify-slim-dependencies:
    steps:
      - run:
          name: Set TAG to current sfdx version
          command: |
            echo "export TAG=$(jq -r .version ./package.json)-slim" >> $BASH_ENV
      - run:
          name: Verify slim dependencies
          command: |
            SFDX_CLI_VERSION="$(docker run -it --rm salesforce/salesforcedx:$TAG bash -c 'sfdx --version')"
            JAVA_VERSION="$(docker run -it --rm salesforce/salesforcedx:$TAG bash -c 'java --version | head -n 1')"
            if [[ ((`echo $SFDX_CLI_VERSION | grep -c "sfdx-cli/"` > 0))]]
            then
              echo "sfdx-cli installed -" $SFDX_CLI_VERSION
            else
              echo "The sfdx-cli installation could not be verified"
              exit 1
            fi
            if [[ ((`echo $JAVA_VERSION | grep -c "openjdk"` > 0))]]
            then
              echo "Java installed -" $JAVA_VERSION
            else
              echo "The Java installation could not be verified"
              exit 1
            fi
  verify-full-dependencies:
    steps:
      - run:
          name: Set TAG to current sfdx version
          command: |
            echo "export TAG=$(jq -r .version ./package.json)-full" >> $BASH_ENV
      - run:
          name: Verify full dependencies
          command: |
            NODE_VERSION="$(docker run -it --rm salesforce/salesforcedx:$TAG bash -c 'node -v')"
            SFDX_CLI_VERSION="$(docker run -it --rm salesforce/salesforcedx:$TAG bash -c 'sfdx --version')"
            JQ_VERSION="$(docker run -it --rm salesforce/salesforcedx:$TAG bash -c 'jq --version')"
            if [[ ((`echo $SFDX_CLI_VERSION | grep -c "sfdx-cli/"` > 0))]]
            then
              echo "sfdx-cli installed -" $SFDX_CLI_VERSION
            else
              echo "The sfdx-cli installation could not be verified"
              exit 1
            fi
            if [[ ((`echo $NODE_VERSION | grep -c "v"` > 0))]]
            then
              echo "node installed -" $NODE_VERSION
            else
              echo "The node installation could not be verified"
              exit 1
            fi
            if [[ ((`echo $JQ_VERSION | grep -c "jq"` > 0))]]
            then
              echo "jq installed -" $JQ_VERSION
            else
              echo "The jq installation could not be verified"
              exit 1
            fi
jobs:
  build-latest-rc:
    docker:
      - image: node:lts
    steps:
      - checkout
      - release-management/install-sf-release
      - run: sf-release cli:latestrc:build

  # There are two pack jobs:
  # - test-pack-tarballs to run on every branch *other than main*
  # - pack-and-upload-tarballs to run only on main
  # The persist_to_workspace feature would allow us to have a
  # pack-tarballs and an upload-tarballs job, but the perf gains
  # is minimal since the workspace is almost a GB to attach.
  test-pack-tarballs:
    docker:
      - image: node:lts
    resource_class: xlarge
    steps:
      - checkout
      - run: |
          apt-get update
          apt-get install -y p7zip-full
      - restore_cache:
          keys:
            - v3-npm-{{checksum "yarn.lock"}}
      - run: yarn install
      - run: yarn pack:tarballs
      - run: yarn pack:verify
      - run: yarn test-smoke-unix

  pack-and-upload-tarballs: &pack-and-upload-tarballs
    docker:
      - image: node:lts
    resource_class: xlarge
    steps:
      - checkout
      # - run: git fetch origin && git pull
      - run: |
          apt-get update
          apt-get install -y p7zip-full
      - restore_cache:
          keys:
            - v3-npm-{{checksum "yarn.lock"}}
      - run: yarn install
      - run: yarn pack:tarballs
      - run: yarn pack:verify
      - run: yarn test-smoke-unix
      - run: yarn upload:tarballs
      - run: ./scripts/promote-stable-rc-tarballs
      - slack/status:
          channel: 'cli-team-alerts'
          fail_only: true

  pack-and-upload-macos-installer:
    macos:
      xcode: 12.5.1
    steps:
      - checkout
      # - run: git fetch origin && git pull
      - run: yarn install
      - run: yarn pack:macos
      - run: yarn upload:macos
      - run: ./scripts/promote-stable-rc-mac

  pack-and-upload-windows-installer:
    <<: *pack-and-upload-tarballs
    steps:
      - checkout
      # - run: git fetch origin && git pull
      - restore_cache:
          keys:
            - v3-npm-{{checksum "yarn.lock"}}
      - run: |
          apt-get update
          apt-get install -y p7zip-full \
            osslsigncode \
            nsis
      - run: yarn install
      - run: |
          echo $WINDOWS_SIGNING_KEY | base64 --decode > /tmp/windows-signing.pfx
      - run: yarn pack:win
      - run: yarn upload:win
      - run: ./scripts/promote-stable-rc-win

  promote-channels:
    docker:
      - image: node:lts
    steps:
      - checkout
      - jq/install
      - restore_cache:
          keys:
            - v3-npm-{{checksum "yarn.lock"}}
      - run: yarn install
      # - run: ./scripts/promote-rc-to-latest # I dont think i need to disable this one, just to be safe.

  change-case-start:
    docker:
      - image: node:latest
    steps:
      - release-management/install-change-case-mgmt
      - release-management/change-case-create

  npm-promotions:
    docker:
      - image: node:latest
    steps:
      - checkout
      - jq/install
      - run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
        # if you try to use yarn here, it will attempt to use the wrong registry and throw 401s
      - run: npm run promote-dist-tags

  docker-promotions:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - run: yarn install --ignore-scripts
      - setup_remote_docker
      - run: echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run: yarn promote-docker

  promote-verify:
    docker:
      - image: node:lts
    steps:
      - checkout
      - jq/install
      - run: ./scripts/verify-promote
      - release-management/install-sf-release
      - run: sf-release cli:versions:inspect -c stable -l archive
      - slack/notify:
          channel: 'cli-team-notifications'
          color: '#9bcd9b'
          message: '`sfdx-cli` (version X.XXX.X) has been promoted to latest. :tada2: Release notes: https://github.com/forcedotcom/cli/blob/master/releasenotes/README.md'
      - slack/status:
          channel: 'cli-team-alerts'
          fail_only: true

  docker-publish-slim:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      # to get shelljs
      - run: yarn install --ignore-scripts
      - setup_remote_docker
      - run: echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run: yarn pack:docker:slim
      - verify-slim-dependencies

  docker-publish-full:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      # to get shelljs
      - run: yarn install --ignore-scripts
      - setup_remote_docker
      - run: echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run: yarn pack:docker:full
      - verify-full-dependencies

  close-CTC:
    docker:
      - image: node:latest
    steps:
      - release-management/install-change-case-mgmt
      - run:
          when: on_fail
          name: Close CTC case as Not Implemented
          command: |
            if [ -z "${SF_CHANGE_CASE_SFDX_AUTH_URL}" ] || [ -z "${SF_CHANGE_CASE_TEMPLATE_ID}" ] || [ -z "${SF_CHANGE_CASE_SCHEDULE_BUILD}" ]; then
                echo "Environment not configured for CTC"
            else
                sfchangecase close --location "https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME" --status "Not Implemented"
            fi
      - run:
          name: All Good! Close CTC case/implementations
          when: on_success
          command: |
            if [ -z "${SF_CHANGE_CASE_SFDX_AUTH_URL}" ] || [ -z "${SF_CHANGE_CASE_TEMPLATE_ID}" ] || [ -z "${SF_CHANGE_CASE_SCHEDULE_BUILD}" ]; then
                echo "Environment not configured for CTC"
            else
                sfchangecase close --location "https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME"
            fi

  run-all-nuts:
    docker:
      - image: node:lts
    parameters:
      sfdx_version:
        description: By default, the latest-rc version of the standalone CLI will be installed.
        default: latest-rc
        type: string

    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-npm-{{checksum "yarn.lock"}}
      - run: yarn install
      - run: ./scripts/run-plugin-nuts.js <<parameters.sfdx_version>>

  monitor-all-nuts:
    docker:
      - image: node:latest
    parameters:
      nuts_job_data:
        description: Parameter to pass the set of NUTs started across all plugins
        default: '[]'
        type: string
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-npm-{{checksum "yarn.lock"}}
      - run: yarn install
      - run: ./scripts/monitor-plugin-nuts.js <<parameters.nuts_job_data>>

workflows:
  version: 2
  test-and-release:
    when: << pipeline.parameters.run-auto-workflows >>
    jobs:
      - release-management/validate-pr:
          filters:
            branches:
              ignore: main
      - release-management/test-package:
          matrix:
            parameters:
              os:
                - linux
                - windows
              node_version:
                - latest
                - lts
                - maintenance
      - test-pack-tarballs:
          # no point to pack if the test fail, and we only care to test the pack with the node version
          # we ship (specified in package.json.oclif.node)
          requires:
            - release-management/test-package
          filters:
            branches:
              ignore: main # test the pack on PRs, but main will do pack-and-upload-tarballs
      - approval:
          type: approval
          requires:
            - release-management/test-package
          filters:
            branches:
              only:
                - ew/plugin-info-hooks-DISABLED
      - release-management/release-package:
          tag: dev
          prerelease: true
          github-release: false
          requires:
            - approval
          filters:
            branches:
              only:
                - ew/plugin-info-hooks-DISABLED
      - pack-and-upload-tarballs:
          filters:
            branches:
              only:
                - ew/plugin-info-hooks-DISABLED
          requires:
            - release-management/release-package
      - pack-and-upload-macos-installer:
          filters:
            branches:
              only:
                - ew/plugin-info-hooks-DISABLED
          requires:
            - pack-and-upload-tarballs
      - pack-and-upload-windows-installer:
          filters:
            branches:
              only:
                - ew/plugin-info-hooks-DISABLED
          requires:
            - pack-and-upload-tarballs
      # - docker-publish-slim:
      #     filters:
      #       branches:
      #         only:
      #           - main
      #     requires:
      #       - release-management/release-package
      #       - pack-and-upload-tarballs
      # - docker-publish-full:
      #     filters:
      #       branches:
      #         only:
      #           - main
      #     requires:
      #       - release-management/release-package
      #       - pack-and-upload-tarballs
      # - run-all-nuts:
      #     # This job requires env var CIRCLECI_API_TOKEN is set to a valid CircleCi API Token
      #     filters:
      #       branches:
      #         only:
      #           - main
      #     requires:
      #       - release-management/release-package

  promote-to-latest:
    triggers:
      - schedule:
          # Thursday mornings at 10am mountain
          cron: '00 16 * * 4'
          filters:
            branches:
              only:
                - main
    jobs:
      # start the change case
      - change-case-start:
          context: CLI_CTC

      - promote-channels:
          requires:
            - change-case-start
      - docker-promotions:
          requires:
            - change-case-start
      - npm-promotions:
          requires:
            - change-case-start
      # close change case
      - close-CTC:
          context: CLI_CTC
          requires:
            - npm-promotions
            - promote-channels
      # verify the npm tags and installers are on the right version
      - promote-verify:
          requires:
            - npm-promotions
            - promote-channels

  build-latest-rc:
    triggers:
      - schedule:
          # Thursday mornings at 10:30am mountain
          cron: '30 16 * * 4'
          filters:
            branches:
              only:
                - main
    jobs:
      - build-latest-rc

  monitor-all-nuts:
    # This workflow requires env var CIRCLECI_API_TOKEN is set to a valid CircleCi API Token
    #
    # Two env vars are used to control the amount of time this job will wait
    # for any individual pipeline to complete
    # NUTS_WAIT_TIME (default 900 seconds) - total time to wait for pipeline completion expressed in seconds
    # NUTS_COMPLETION_RETRY_CNT (default 30) - number of times monitor will retry check for pipeline completion
    # Wait interval between status checks is calculated as floor(NUTS_WAIT_TIME/NUTS_COMPLETION_RETRY_CNT)
    when: << pipeline.parameters.run-just-nuts >>
    jobs:
      - monitor-all-nuts:
          name: monitor-just-nuts
          nuts_job_data: << pipeline.parameters.nuts_job_data >>
          filters:
            branches:
              only:
                - main

  dependabot-automerge:
    triggers:
      - schedule:
          cron: '0 2,5,8,11 * * *'
          filters:
            branches:
              only:
                - main
    jobs:
      - release-management/dependabot-automerge
