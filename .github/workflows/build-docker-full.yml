name: build-docker-full
on:
  workflow_call:
    inputs:
      version:
        type: string
        description: The release semver version
        required: true
      channel:
        type: string
        description: The release channel (latest-rc, nightly, dev, etc)
        required: true

jobs:
  buildPush:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: salesforce/salesforcedx

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          file: dockerfiles/Dockerfile_full
          # We are using latest-rc SF_CLI_VERSION version. Soon both CLIs will not be bundled together
          build-args: |
            SALESFORCE_CLI_VERSION=${{ inputs.version }}
            SF_CLI_VERSION=^1
          # TODO: Do we want _all_ docker images to release with the version in their name?
          #       Should we skip this on prereleases?
          tags: salesforce/salesforcedx:${{ inputs.channel }}-full, salesforce/salesforcedx:${{ inputs.version }}-full

  verify:
    needs: buildPush
    runs-on: ubuntu-latest
    container:
      image: salesforce/salesforcedx:${{ inputs.version }}-full
    steps:
      - name: verify node, sfdx, jq
        # without bash this will fail.  Not sure what the default shell is but it doesn't like the [[(())]] bashism
        shell: bash
        run: |
          set -e
          node -v
          sfdx version --verbose
          jq --help
          NODE_VERSION=$(sfdx version --verbose --json | jq '.nodeVersion')
          SFDX_CLI_VERSION=$(sfdx version --verbose --json | jq '.cliVersion')
          if [[ ((`echo $SFDX_CLI_VERSION | grep -c "sfdx-cli/"` > 0))]]
          then
            echo "sfdx-cli installed -" $SFDX_CLI_VERSION
          else
            echo "The sfdx-cli installation could not be verified"
            exit 1
          fi
          if [[ ((`echo $NODE_VERSION | grep -c "v"` > 0))]]
          then
            echo "node installed -" $NODE_VERSION
          else
            echo "The node installation could not be verified"
            exit 1
          fi
