name: promote

on:
  workflow_call:
    inputs:
      version:
        type: string
        description: 'Semver version to promote. Example: Promote **7.123.1** as dev'
      old-channel:
        type: string
        description: 'Existing channel to promote. Example: Promote **latest-rc** to latest'
      new-channel:
        type: string
        description: 'The channel to promote to. Example: Promote latest-rc to **latest**'
        required: true
      use-ctc:
        type: boolean
        required: false
        description: Open a change case for this promotion. Only really needed for promotions to latest.
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: 'Semver version to promote. Example: Promote **7.123.1** as dev'
      old-channel:
        type: string
        description: 'Existing channel to promote. Example: Promote **latest-rc** to latest'
      new-channel:
        type: string
        description: 'The channel to promote to. Example: Promote latest-rc to **latest**'
        required: true
      use-ctc:
        type: boolean
        required: false
        description: Open a change case for this promotion. Only needed for promotions to latest.

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Ensure either 'version' or 'old-channel' is passed"
        if: ${{ !inputs.version && !inputs.old-channel }}
        run: |
          echo "ERROR: You must pass either 'version' or 'old-channel' to promote from."
          echo "-> Use 'version' if you are promoting a new semver version to a channel. Example: I want to promote version '7.123.1' to channel 'dev'.
          echo "-> Use 'old-channel' if you are promoting an existing channel to another channel. Example: I want to promote channel 'latest-rc' to channel 'latest'.
          exit 1
      - name: Ensure only one "starting point"
        if: ${{ inputs.version && inputs.old-channel }}
        run: |
          echo "ERROR: Inputs 'version' and 'old-channel' cannot both be passed (exactlyOne)."
          echo "-> Use 'version' if you are promoting a new semver version to a channel. Example: I want to promote version '7.123.1' to channel 'dev'.
          echo "-> Use 'old-channel' if you are promoting an existing channel to another channel. Example: I want to promote channel 'latest-rc' to channel 'latest'.
          exit 1
      - name: Ensure channels do not include "stable"
        if: ${{ contains(inputs.old-channel, 'stable') || ${{ contains(inputs.new-channel, 'stable') }}
        run: |
          echo "ERROR: Do not use 'stable' in channel names. Use 'latest' instead.
          echo "-> S3 resources (stable, stable-rc) will be translated for you and will eventually be deprecated in favor of 'latest' and 'latest-rc'
          exit 1

  # Even if inputs.version is passed, we still need the SHA for a later step
  get-package-info:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version-info.outputs.version }}
      sha: ${{ steps.version-info.outputs.sha }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: lts/*
          cache: yarn
      - uses: salesforcecli/github-workflows/.github/actions/versionInfo@main
        id: version-info
        with:
          version: ${{ inputs.version || inputs.old-channel }}

  # Replace 'latest' with 'stable' for S3 resources
  build-s3-channel:
    runs-on: ubuntu-latest
    needs: [get-package-info]
    outputs:
      s3-new-channel: ${{ steps.replace-channel.outputs.s3-new-channel }}
    steps:
      - id: replace-channel
        run: |
          S3_NEW_CHANNEL=$(${{ inputs.new-channel }}/latest/stable)
          echo "s3-new-channel=$S3_NEW_CHANNEL" >> $GITHUB_OUTPUT

  ctc-open:
    if: inputs.use-ctc
    uses: salesforcecli/github-workflows/.github/workflows/ctcOpen.yml@main
    secrets: inherit

  docker-promote:
    needs: [ctc-open, get-package-info]
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - run: |
          docker pull salesforce/salesforcedx:${{ needs.get-package-info.outputs.version }}-slim
          docker tag salesforce/salesforcedx:${{ needs.get-package-info.outputs.version }}-slim salesforce/salesforcedx:${{ inputs.new-channel }}-slim
          docker push salesforce/salesforcedx:${{ inputs.new-channel }}-slim

          docker pull salesforce/salesforcedx:${{ needs.get-package-info.outputs.version }}-full
          docker tag salesforce/salesforcedx:${{ needs.get-package-info.outputs.version }}-full salesforce/salesforcedx:${{ inputs.new-channel }}-full
          docker push salesforce/salesforcedx:${{ inputs.new-channel }}-full

  npm-promote:
    needs: [ctc-open, get-package-info]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: lts/*
      # NOTE: If you try to use yarn here, it will use the wrong registry and throw 401s
      - run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm dist-tag add sfdx-cli@${{ needs.get-package-info.outputs.version }} ${{ inputs.new-channel }}

  channel-promote:
    needs: [ctc-open, get-package-info, build-s3-channel]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: lts/*
          cache: yarn
      - run: yarn install
      - run: yarn promote --version ${{ needs.get-package-info.outputs.version }} --sha ${{ needs.get-package-info.outputs.sha }} --channel ${{ needs.build-s3-channel.outputs.s3-new-channel }} --max-age 300 --macos --win --indexes --xz
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}

  # This job is renames the sfdx-x64.pkg that oclif v3 produces to sfdx.pkg which matches what oclif v2 produces.
  # Doing so avoids breaking changes for customers relying on the old URLs to download the CLI.
  # It can be removed once the developer site is linking to the new sfdx-x64.pkg file and the mac signing job is signing the new -x64.pkg file.
  rename-mac-pkg:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_EC2_METADATA_DISABLED: true
    needs: [channel-promote, build-s3-channel]
    steps:
      - uses: salesforcecli/github-workflows/.github/actions/renameMacPkg@main
        with:
          cli: sfdx
          channel: ${{ needs.build-s3-channel.outputs.s3-new-channel }}

  ctcCloseSuccess:
    needs: [ctc-open, npm-promote, docker-promote, channel-promote, rename-mac-pkg]
    if: needs.ctc-open.result == 'success' && needs.ctc-open.outputs.changeCaseId && needs.npm-promote.result == 'success' && needs.docker-promote.result == 'success' && needs.channel-promote.result == 'success' && needs.rename-mac-pkg.result == 'success'
    uses: salesforcecli/github-workflows/.github/workflows/ctcClose.yml@main
    secrets: inherit
    with:
      changeCaseId: ${{needs.ctc-open.outputs.changeCaseId}}

  ctcCloseFail:
    needs: [ctc-open, npm-promote, docker-promote, channel-promote, rename-mac-pkg]
    if: always() && needs.ctc-open.outputs.changeCaseId && (needs.ctc-open.result != 'success' || needs.npm-promote.result != 'success' || needs.docker-promote.result != 'success' || needs.channel-promote.result != 'success' || needs.rename-mac-pkg.result != 'success')
    uses: salesforcecli/github-workflows/.github/workflows/ctcClose.yml@main
    secrets: inherit
    with:
      changeCaseId: ${{ needs.ctc-open.outputs.changeCaseId }}
      status: Not Implemented
