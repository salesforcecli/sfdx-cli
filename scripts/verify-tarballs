#!/usr/bin/env bash

set -ex

function stderr() {
    set +x
    echo "$@" 1>&2
    set -x
}

function stdout() {
    set +x
    echo "$@"
    set -x
}

BASE_DIR=tmp/sfdx

# Pre-check for some known path length offenders

function ensure_no_webdriverio_test() {
    test_dir="$BASE_DIR/node_modules/webdriverio/test"
    if [[ -e "$test_dir" ]]; then
        stderr "$test_dir is present! Was the clean not aggressive enough?"
        exit 1
    fi
}

function ensure_no_heroku_cli_util_nyc() {
    test_dir="$BASE_DIR/node_modules/@salesforce/plugin-templates/node_modules/salesforce-alm/node_modules/heroku-cli-util/.nyc_output"
    if [[ -e "$test_dir" ]]; then
        stderr "$test_dir is present! Was the clean not aggressive enough?"
        exit 1
    fi
}

# Make sure cleaning was not too aggressive and that path lengths
# in the build tree are as windows-safe as they can be
#
# Check for potentially overflowing windows paths:
# * assume a max practical windows username length of 64 characters (https://technet.microsoft.com/it-it/library/bb726984(en-us).aspx)
# * add characters to account for the root sfdx client tmp untar path for a total of 135
#   - e.g. C:\Users\<username>\AppData\Local\sfdx\tmp\sfdx-cli-v7.xx.yy-abcdef-windows-x64\
# * subtract those 135 characters from the max windows path length of 259 to yield the allowable length of 124 path characters
# * considering that we currently have some dependencies in the built output that exceed 124 characters (up to 139 in salesforce-lightning-cli)
#   we will consider the maximum path length of 139, plus 5 as a buffer, as the hard upper limit to our allowable path length;
#   this leaves us a relatively comfortable maximum windows username length of 48 characters with a hard maximum path length of 144 characters
# * then scan the cleaned build output directory for paths exceding this threshold, and exit with an error if detected
function scan_path_lengths() {
    warnlen=124
    maxlen=146
    cd "$BASE_DIR"
    warntest=$(find node_modules | awk -v warnlen="$warnlen" '{ if (length($0) > warnlen) print "fail" }' | uniq)
    if [[ "$warntest" == "fail" ]]; then
        stdout "WARN: Some paths could result in update errors for Windows users with usernames greater than 48 characters!"
        find node_modules | awk -v warnlen="$warnlen" '{ if (length($0) > warnlen) printf("%-3s  %s\n", length($0), $0) }'
    fi
    maxtest=$(find node_modules | awk -v maxlen="$maxlen" '{ if (length($0) > maxlen) print "fail" }' | uniq)
    if [[ "$maxtest" == "fail" ]]; then
        stderr "ERROR: Unacceptably long paths detected in base build!"
        find node_modules | awk -v maxlen="$maxlen" '{ if (length($0) > maxlen) printf("%-3s  %s\n", length($0), $0) }'
        exit 1
    fi
    cd -
}

# We've accidentally over-cleaned the force:apex:test code in the past, so let's make sure we don't repeat that mistake
function ensure_apex_test() {
    src_dir="$BASE_DIR/node_modules/salesforce-alm/dist/lib/test"
    if [[ ! -d "$src_dir" ]]; then
        stderr "$src_dir is missing! Was the test clean too aggressive?"
        exit 1
    fi
}

# We've accidentally over-cleaned the apex-node code in the past, so let's make sure we don't repeat that mistake
function ensure_apex_node_test() {
    src_dir="$BASE_DIR/node_modules/@salesforce/apex-node/lib/src/tests"
    if [[ ! -d "$src_dir" ]]; then
        stderr "$src_dir is missing! Was the test clean too aggressive?"
        exit 1
    fi
}

# We delete the test directory from the plugin generator core plugin, -- double check their preservation
function ensure_plugin_generate_test_templates() {
    template_readme="$BASE_DIR/node_modules/@salesforce/plugin-generator/templates/sfdxPlugin/test"
    if [[ ! -d "$template_readme" ]]; then
        stderr "$template_readme is missing! Was the test clean too aggressive?"
        exit 1
    fi
}

# We've accidentally over-cleaned the @salesforce/plugin-templates code in the past, so let's make sure we don't repeat that mistake
function ensure_templates_commands() {
    src_dir="$BASE_DIR/node_modules/@salesforce/plugin-templates"
    if [[ ! -d "$src_dir" ]]; then
        stderr "$src_dir is missing! Was the doc clean too aggressive?"
        exit 1
    fi
}

# Make sure no cli test or maps files are included in the cli dist dir
function ensure_no_dist_tests_or_maps() {
    tests=$(find "$BASE_DIR/dist" -name \*.test.js | wc -l | awk '{ print $1 }')
    if [[ "$tests" != "0" ]]; then
        stderr "Found $tests tests in $BASE_DIR/dist!"
        exit 1
    fi
    maps=$(find "$BASE_DIR/dist" -name \*.js.map | wc -l | awk '{ print $1 }')
    if [[ "$maps" != "0" ]]; then
        stderr "Found $maps maps in $BASE_DIR/dist!"
        exit 1
    fi
}

# Make sure we won't include anything unintended in the base dir structure (ignoring node_modules)
function ensure_no_unexpected_files() {
    find "$BASE_DIR" -path "$BASE_DIR/node_modules" -prune -o -type f -print | while read -r f; do
        set +x
        echo "$f"
        if [[ (
            "$f" != "$BASE_DIR/package.json" &&
            "$f" != "$BASE_DIR/LICENSE.txt" &&
            "$f" != "$BASE_DIR/README.md" &&
            "$f" != "$BASE_DIR/CHANGELOG.md" &&
            "$f" != "$BASE_DIR/yarn.lock" &&
            "$f" != "$BASE_DIR/oclif.manifest.json" &&
            "$f" != "$BASE_DIR/bin/"* &&
            "$f" != "$BASE_DIR/dist/"*".js" &&
            "$f" != "$BASE_DIR/dist/builtins/package.json" &&
            "$f" != "$BASE_DIR/scripts/clean-for-tarballs"
        ) || (
            "$f" == "$BASE_DIR/dist/"*".test.js"
        ) ]]; then
            stderr "Unexpected file found in base build dir! ${f}"
            exit 1
        fi
        set -x
    done
}

ensure_no_webdriverio_test
ensure_no_heroku_cli_util_nyc
scan_path_lengths
ensure_apex_test
ensure_apex_node_test
ensure_templates_commands
ensure_no_dist_tests_or_maps
ensure_no_unexpected_files
ensure_plugin_generate_test_templates